name: CI/CD - Frontend (Tests, Build, Deploy + HTTPS)

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: fe-${{ github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE_REPO: andreapalomares31/recetario-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend/package-lock.json

      - name: Install deps
        working-directory: frontend/frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend/frontend
        run: npm test

  deploy:
    name: Despliegue en Azure (Web App HTTPS, Docker Hub)
    needs: test
    runs-on: ubuntu-latest

    env:
      RG:               ${{ secrets.RESOURCE_GROUP }}     # ej: rg-recetario-westus3
      LOCATION:         ${{ secrets.AZURE_LOCATION }}     # ej: westus3
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}   # ej: recetario-plan-wus3
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}        # ej: recetario-frontend

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure App Service Plan
        run: |
          set -euo pipefail
          PLAN="${APP_SERVICE_PLAN:-recetario-plan}"
          az appservice plan show -g "$RG" -n "$PLAN" \
          || az appservice plan create -g "$RG" -n "$PLAN" --is-linux --sku B1 --location "$LOCATION"
          echo "APP_SERVICE_PLAN=$PLAN" >> $GITHUB_ENV

      - name: Docker Hub login
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build image (frontend)
        run: |
          docker build --platform linux/amd64 \
            -f frontend/frontend/Dockerfile \
            --build-arg VITE_API_URL='${{ secrets.VITE_API_URL }}' \
            -t ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.IMAGE_REPO }}:latest \
            frontend/frontend

      - name: Push image to Docker Hub
        run: |
          docker push ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_REPO }}:latest

      - name: Ensure Web App & Container config (Docker Hub, new flags)
        run: |
          set -euo pipefail
          PLAN="$APP_SERVICE_PLAN"
          WN="${WEBAPP_NAME}"
          if [ -z "$WN" ]; then
            WN="recetario-front-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          fi
          WN=$(echo "$WN" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          echo "Usando WEBAPP_NAME=$WN"

          # Crear la WebApp si no existe (apunta ya a Docker Hub)
          if ! az webapp show -g "$RG" -n "$WN" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$PLAN" -n "$WN" \
              --deployment-container-image-name "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
          fi

          # Configurar contenedor: Docker Hub pÃºblico (sin credenciales)
          az webapp config container set -g "$RG" -n "$WN" \
            --container-image-name "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}" \
            --container-registry-url "https://index.docker.io"

          # Limpiar DOCKER_* viejos que puedan interferir
          az webapp config appsettings delete -g "$RG" -n "$WN" --setting-names \
            DOCKER_REGISTRY_SERVER_URL DOCKER_REGISTRY_SERVER_USERNAME DOCKER_REGISTRY_SERVER_PASSWORD DOCKER_CUSTOM_IMAGE_NAME || true

          # App settings requeridos
          az webapp config appsettings set -g "$RG" -n "$WN" --settings \
            WEBSITES_PORT=80 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

          echo "WEBAPP_NAME=$WN" >> $GITHUB_ENV

      - name: Restart Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      - name: Mostrar URL HTTPS del Frontend
        id: show_url
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Frontend HTTPS: https://${HOST}"
          echo "url=https://${HOST}" >> $GITHUB_OUTPUT
          {
            echo "### âœ… Frontend desplegado"
            echo ""
            echo "ðŸ”— **URL:** https://${HOST}"
          } >> $GITHUB_STEP_SUMMARY
