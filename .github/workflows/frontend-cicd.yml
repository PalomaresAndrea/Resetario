name: CI/CD - Frontend (Tests, Build, Deploy + HTTPS)


on:
  push:
    branches: [ main ]
  pull_request:

# Evitar despliegues solapados (sin usar secrets aquÃ­)
concurrency:
  group: fe-${{ github.repository }}-${{ github.ref_name }}
  cancel-in-progress: true


env:
  IMAGE_NAME: recetario-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend/package-lock.json
      - run: npm ci
      - run: npm test


  deploy:
    name: Despliegue en Azure (Web App HTTPS)
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/frontend
    env:
      # ===== Azure / ACR =====
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # p.ej. recetariocr12345.azurecr.io
      ACR_NAME:         ${{ secrets.ACR_NAME }}           # p.ej. recetariocr12345
      RG:               ${{ secrets.RESOURCE_GROUP }}     # p.ej. rg-recetario-westus3
      # ===== App Service =====
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}   # p.ej. recetario-plan-wus3
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}        # p.ej. recetario-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Microsoft.Web provider (non-blocking)
        run: |
          STATE=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.Web state: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "Microsoft.Web no estÃ¡ registrado desde este SP. Continuandoâ€¦"
          fi
        shell: bash
        working-directory: .

      - name: ACR Login (RBAC)
        run: az acr login --name ${{ env.ACR_NAME }}
        shell: bash
        working-directory: .

      # Tu Dockerfile se llama "dockerfile" (minÃºsculas) en frontend/frontend
      - name: Build image (frontend)
        run: |
          docker build \
            --platform linux/amd64 \
            -f dockerfile \
            -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            .

      - name: Push image to ACR
        run: docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # ====== Docker Hub (opcional) ======
      - name: Docker Hub login (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -n "$DH_USER" ] && [ -n "$DH_TOKEN" ]; then
            echo "$DH_TOKEN" | docker login -u "$DH_USER" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi
        working-directory: .

      - name: Push image to Docker Hub (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DH_REPO: ${{ secrets.DOCKERHUB_REPO }}   # opcional; usa IMAGE_NAME si no estÃ¡
        run: |
          if [ -n "$DH_USER" ] && [ -n "$DH_TOKEN" ]; then
            [ -z "$DH_REPO" ] && DH_REPO="${{ env.IMAGE_NAME }}"
            SRC="${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            DST_SHA="${DH_USER}/${DH_REPO}:${GITHUB_SHA::7}"
            DST_LATEST="${DH_USER}/${DH_REPO}:latest"
            docker tag "$SRC" "$DST_SHA"
            docker tag "$SRC" "$DST_LATEST"
            docker push "$DST_SHA"
            docker push "$DST_LATEST"
          else
            echo "No Docker Hub secrets; skipping push."
          fi
        working-directory: .
      # ====================================

      - name: Configure Web App container (HTTPS)
        run: |
          az webapp config container set \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group ${{ env.RG }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ env.ACR_LOGIN_SERVER }}

          az webapp config appsettings set \
            --name ${{ env.WEBAPP_NAME }} \
            --resource-group ${{ env.RG }} \
            --settings WEBSITES_PORT=80
        working-directory: .

      - name: Restart Web App
        run: az webapp restart --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RG }}
        working-directory: .

      - name: Mostrar URL HTTPS
        id: show_url
        run: |
          HOST=$(az webapp show -g ${{ env.RG }} -n ${{ env.WEBAPP_NAME }} --query defaultHostName -o tsv)
          echo "Frontend HTTPS: https://${HOST}"
          echo "url=https://${HOST}" >> $GITHUB_OUTPUT
          {
            echo "### âœ… Frontend desplegado"
            echo ""
            echo "ðŸ”— **URL:** https://${HOST}"
          } >> $GITHUB_STEP_SUMMARY
        working-directory: .
