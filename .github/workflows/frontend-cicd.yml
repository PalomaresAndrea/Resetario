name: CI/CD - Frontend (Tests, Build, Deploy + HTTPS)

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: fe-${{ github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: recetario-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend/package-lock.json

      - name: Install deps
        working-directory: frontend/frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend/frontend
        run: npm test

  deploy:
    name: Despliegue en Azure (Web App HTTPS)
    needs: test
    runs-on: ubuntu-latest

    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # ej: recetariocr12345.azurecr.io
      ACR_NAME:         ${{ secrets.ACR_NAME }}           # ej: recetariocr12345
      RG:               ${{ secrets.RESOURCE_GROUP }}     # ej: rg-recetario-westus3
      LOCATION:         ${{ secrets.AZURE_LOCATION }}     # ej: westus3
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}   # ej: recetario-plan-wus3
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}        # ej: recetario-frontend

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Microsoft.Web provider (non-blocking)
        run: |
          STATE=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.Web state: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "Microsoft.Web no está registrado o no hay permisos para registrarlo desde este SP. Continuando…"
          fi

      - name: ACR Login (RBAC)
        run: az acr login --name "$ACR_NAME"

      # Build con Dockerfile y contexto correctos
      - name: Build image (frontend)
        run: |
          docker build --platform linux/amd64 \
            -f frontend/frontend/Dockerfile \
            -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            frontend/frontend

      - name: Push image to ACR
        run: docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push image to Docker Hub (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_REPO: ${{ secrets.DOCKERHUB_REPO }}
        run: |
          if [ -n "${DH_USER}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            [ -z "${DH_REPO}" ] && DH_REPO="${{ env.IMAGE_NAME }}"
            SRC="$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            DST_SHA="${DH_USER}/${DH_REPO}:${GITHUB_SHA::7}"
            DST_LATEST="${DH_USER}/${DH_REPO}:latest"
            docker tag "$SRC" "$DST_SHA"
            docker tag "$SRC" "$DST_LATEST"
            docker push "$DST_SHA"
            docker push "$DST_LATEST"
          else
            echo "No Docker Hub secrets; skipping push."
          fi

      - name: Ensure App Service Plan
        run: |
          PLAN="${APP_SERVICE_PLAN:-recetario-plan}"
          az appservice plan show -g "$RG" -n "$PLAN" \
          || az appservice plan create -g "$RG" -n "$PLAN" --is-linux --sku B1 --location "$LOCATION"
          echo "APP_SERVICE_PLAN=$PLAN" >> $GITHUB_ENV

      - name: Ensure Web App & Container config
        run: |
          PLAN="$APP_SERVICE_PLAN"
          WN="${WEBAPP_NAME}"
          if [ -z "$WN" ]; then
            WN="recetario-front-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          fi
          WN=$(echo "$WN" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          echo "Usando WEBAPP_NAME=$WN"

          if ! az webapp show -g "$RG" -n "$WN" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$PLAN" -n "$WN" \
              --deployment-container-image-name "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          fi

          # Configurar contenedor desde ACR
          az webapp config container set -g "$RG" -n "$WN" \
            --docker-custom-image-name "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
            --docker-registry-server-url "https://$ACR_LOGIN_SERVER" \
            --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
            --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

          # App Settings para contenedor de frontend
          az webapp config appsettings set -g "$RG" -n "$WN" --settings \
            WEBSITES_PORT=80 \
            WEBSITES_CONTAINER_START_TIME_LIMIT=600

          # Health check del Web App en la RAÍZ (no /health)
          az webapp config set -g "$RG" -n "$WN" --always-on true --health-check-path "/"

          echo "WEBAPP_NAME=$WN" >> $GITHUB_ENV

      - name: Restart Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      # Espera a que la raíz responda 200/301/302 (no /health)
      - name: Esperar a que el frontend esté disponible
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Probing https://${HOST}/"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 "https://${HOST}/" || true)
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              echo "✅ Frontend respondió con $code"
              exit 0
            fi
            echo "Try $i/30… got $code"
            sleep 5
          done
          echo "❌ App no respondió a tiempo"
          exit 1

      - name: Mostrar URL HTTPS del Frontend
        id: show_url
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Frontend HTTPS: https://${HOST}"
          echo "url=https://${HOST}" >> $GITHUB_OUTPUT
          {
            echo "### ✅ Frontend desplegado"
            echo ""
            echo "🔗 **URL:** https://${HOST}"
          } >> $GITHUB_STEP_SUMMARY
