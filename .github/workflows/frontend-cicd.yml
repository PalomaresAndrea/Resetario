name: CI/CD - Frontend (Tests, Build, Deploy + HTTPS)

on:
  push:
    branches: [ main ]
  pull_request:

# Evita despliegues paralelos en la misma rama
concurrency:
  group: fe-${{ github.ref_name }}
  cancel-in-progress: true

env:
  # Imagen del frontend en ACR
  IMAGE_NAME: recetario-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend/package-lock.json

      - name: Install deps
        working-directory: frontend/frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend/frontend
        run: npm test

  deploy:
    name: Despliegue en Azure (Web App HTTPS)
    needs: test
    runs-on: ubuntu-latest

    env:
      # ===== Azure / ACR =====
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # p.ej. recetariocr12345.azurecr.io
      ACR_NAME:         ${{ secrets.ACR_NAME }}           # p.ej. recetariocr12345
      RG:               ${{ secrets.RESOURCE_GROUP }}     # p.ej. rg-recetario-westus3
      LOCATION:         ${{ secrets.AZURE_LOCATION }}     # p.ej. westus3

      # ===== App Service =====
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}   # p.ej. recetario-plan-wus3
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}        # p.ej. recetario-frontend

    steps:
      - uses: actions/checkout@v4

      # Login a Azure con tu Service Principal (AZURE_CREDENTIALS)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ComprobaciÃ³n del provider Microsoft.Web (no bloqueante)
      - name: Check Microsoft.Web provider (non-blocking)
        run: |
          STATE=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.Web state: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "Microsoft.Web no estÃ¡ registrado o no hay permisos para registrarlo desde este SP. Continuandoâ€¦"
          fi

      # Login a ACR por RBAC
      - name: ACR Login (RBAC)
        run: az acr login --name "$ACR_NAME"

      # Build de la imagen del frontend (Dockerfile estÃ¡ en frontend/frontend)
      - name: Build image (frontend)
        run: |
          docker build --platform linux/amd64 \
            -f frontend/frontend/Dockerfile \
            -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            frontend/frontend

      # Push a ACR
      - name: Push image to ACR
        run: docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # ====== Docker Hub (opcional; solo si existen secrets) ======
      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push image to Docker Hub (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_REPO: ${{ secrets.DOCKERHUB_REPO }} # si no estÃ¡, usaremos IMAGE_NAME
        run: |
          if [ -n "${DH_USER}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            [ -z "${DH_REPO}" ] && DH_REPO="${{ env.IMAGE_NAME }}"
            SRC="$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            DST_SHA="${DH_USER}/${DH_REPO}:${GITHUB_SHA::7}"
            DST_LATEST="${DH_USER}/${DH_REPO}:latest"
            docker tag "$SRC" "$DST_SHA"
            docker tag "$SRC" "$DST_LATEST"
            docker push "$DST_SHA"
            docker push "$DST_LATEST"
          else
            echo "No Docker Hub secrets; skipping push."
          fi
      # ===========================================================

      # Crear/usar App Service Plan (Linux). Si ya existe, no falla.
      - name: Ensure App Service Plan
        run: |
          PLAN="${APP_SERVICE_PLAN:-recetario-plan}"
          az appservice plan show -g "$RG" -n "$PLAN" \
          || az appservice plan create -g "$RG" -n "$PLAN" --is-linux --sku B1 --location "$LOCATION"
          echo "APP_SERVICE_PLAN=$PLAN" >> $GITHUB_ENV

      # Crear/usar Web App for Containers y apuntarlo a la imagen del ACR
      - name: Ensure Web App & Container config
        run: |
          PLAN="$APP_SERVICE_PLAN"
          WN="${WEBAPP_NAME}"
          # nombre vÃ¡lido/Ãºnico si no viene
          if [ -z "$WN" ]; then
            WN="recetario-front-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}"
          fi
          WN=$(echo "$WN" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
          echo "Usando WEBAPP_NAME=$WN"

          if ! az webapp show -g "$RG" -n "$WN" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$PLAN" -n "$WN" \
              --deployment-container-image-name "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          fi

          # Configurar contenedor + credenciales de ACR (si usas admin user)
          az webapp config container set -g "$RG" -n "$WN" \
            --docker-custom-image-name "$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
            --docker-registry-server-url "https://$ACR_LOGIN_SERVER" \
            --docker-registry-server-user "${{ secrets.ACR_USERNAME }}" \
            --docker-registry-server-password "${{ secrets.ACR_PASSWORD }}"

          # Puerto del contenedor Nginx
          az webapp config appsettings set -g "$RG" -n "$WN" --settings WEBSITES_PORT=80

          echo "WEBAPP_NAME=$WN" >> $GITHUB_ENV

      - name: Restart Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      - name: Mostrar URL HTTPS del Frontend
        id: show_url
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Frontend HTTPS: https://${HOST}"
          echo "url=https://${HOST}" >> $GITHUB_OUTPUT
          {
            echo "### âœ… Frontend desplegado"
            echo ""
            echo "ðŸ”— **URL:** https://${HOST}"
          } >> $GITHUB_STEP_SUMMARY
