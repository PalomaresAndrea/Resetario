name: CI/CD - Frontend (Tests, Build, Deploy desde Docker Hub)

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: fe-${{ github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: recetario-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend/package-lock.json

      - name: Instalar dependencias
        working-directory: frontend/frontend
        run: npm ci

      - name: Ejecutar tests
        working-directory: frontend/frontend
        run: npm test

  deploy:
    name: Despliegue en Azure (Web App Linux + Docker Hub)
    needs: test
    runs-on: ubuntu-latest

    env:
      RG:               ${{ secrets.RESOURCE_GROUP }}
      LOCATION:         ${{ secrets.AZURE_LOCATION }}
      APP_SERVICE_PLAN: ${{ secrets.APP_SERVICE_PLAN }}
      WEBAPP_NAME:      ${{ secrets.WEBAPP_NAME }}
      DH_USER:          ${{ secrets.DOCKERHUB_USERNAME }}
      DH_TOKEN:         ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Hub login
        run: echo "$DH_TOKEN" | docker login -u "$DH_USER" --password-stdin

      - name: Build imagen (frontend)
        run: |
          set -euo pipefail
          docker build --platform linux/amd64 \
            -f frontend/frontend/Dockerfile \
            --build-arg VITE_API_URL='${{ secrets.VITE_API_URL }}' \
            -t $DH_USER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -t $DH_USER/${{ env.IMAGE_NAME }}:latest \
            frontend/frontend

      - name: Push a Docker Hub
        run: |
          set -euo pipefail
          docker push $DH_USER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push $DH_USER/${{ env.IMAGE_NAME }}:latest

      - name: Asegurar App Service Plan (Linux)
        run: |
          set -euo pipefail
          az appservice plan show -g "$RG" -n "$APP_SERVICE_PLAN" \
          || az appservice plan create -g "$RG" -n "$APP_SERVICE_PLAN" --is-linux --sku B1 --location "$LOCATION"

      - name: Asegurar Web App
        run: |
          set -euo pipefail
          if ! az webapp show -g "$RG" -n "$WEBAPP_NAME" >/dev/null 2>&1; then
            az webapp create -g "$RG" -p "$APP_SERVICE_PLAN" -n "$WEBAPP_NAME" \
              --deployment-container-image-name "$DH_USER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          fi

      - name: Configurar contenedor (Docker Hub) y App Settings
        run: |
          set -euo pipefail
          # Importante: URL del registro de Docker Hub
          az webapp config container set -g "$RG" -n "$WEBAPP_NAME" \
            --container-image-name "$DH_USER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
            --container-registry-url "https://index.docker.io/v1/" \
            --container-registry-user "$DH_USER" \
            --container-registry-password "$DH_TOKEN"

          # Ajusta el puerto si tu contenedor NO expone 80
          az webapp config appsettings set -g "$RG" -n "$WEBAPP_NAME" --settings \
            WEBSITES_PORT=80 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITES_CONTAINER_START_TIME_LIMIT=180

      - name: Reiniciar Web App
        run: az webapp restart -g "$RG" -n "$WEBAPP_NAME"

      - name: Mostrar URL
        run: |
          HOST=$(az webapp show -g "$RG" -n "$WEBAPP_NAME" --query defaultHostName -o tsv)
          echo "Frontend HTTPS: https://${HOST}"
          {
            echo "### ✅ Frontend desplegado desde Docker Hub"
            echo ""
            echo "🔗 **URL:** https://${HOST}"
            echo "🖼️ **Imagen:** $DH_USER/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          } >> $GITHUB_STEP_SUMMARY
